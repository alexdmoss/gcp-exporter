// Code generated by mockery v1.0.0

// This comment works around https://github.com/vektra/mockery/issues/155

package services

import io_prometheus_client "github.com/prometheus/client_model/go"
import mock "github.com/stretchr/testify/mock"
import prometheus "github.com/prometheus/client_golang/prometheus"

// MockPrometheusRegistryInterface is an autogenerated mock type for the PrometheusRegistryInterface type
type MockPrometheusRegistryInterface struct {
	mock.Mock
}

// Gather provides a mock function with given fields:
func (_m *MockPrometheusRegistryInterface) Gather() ([]*io_prometheus_client.MetricFamily, error) {
	ret := _m.Called()

	var r0 []*io_prometheus_client.MetricFamily
	if rf, ok := ret.Get(0).(func() []*io_prometheus_client.MetricFamily); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*io_prometheus_client.MetricFamily)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MustRegister provides a mock function with given fields: _a0
func (_m *MockPrometheusRegistryInterface) MustRegister(_a0 ...prometheus.Collector) {
	_va := make([]interface{}, len(_a0))
	for _i := range _a0 {
		_va[_i] = _a0[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// Register provides a mock function with given fields: _a0
func (_m *MockPrometheusRegistryInterface) Register(_a0 prometheus.Collector) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(prometheus.Collector) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unregister provides a mock function with given fields: _a0
func (_m *MockPrometheusRegistryInterface) Unregister(_a0 prometheus.Collector) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(prometheus.Collector) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
