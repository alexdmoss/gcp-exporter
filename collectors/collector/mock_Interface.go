// Code generated by mockery v1.0.0

// This comment works around https://github.com/vektra/mockery/issues/155

package collector

import http "net/http"
import mock "github.com/stretchr/testify/mock"
import prometheus "github.com/prometheus/client_golang/prometheus"

// MockInterface is an autogenerated mock type for the Interface type
type MockInterface struct {
	mock.Mock
}

// Collect provides a mock function with given fields: _a0
func (_m *MockInterface) Collect(_a0 chan<- prometheus.Metric) {
	_m.Called(_a0)
}

// Describe provides a mock function with given fields: _a0
func (_m *MockInterface) Describe(_a0 chan<- *prometheus.Desc) {
	_m.Called(_a0)
}

// GetData provides a mock function with given fields:
func (_m *MockInterface) GetData() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetName provides a mock function with given fields:
func (_m *MockInterface) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Init provides a mock function with given fields: _a0
func (_m *MockInterface) Init(_a0 *http.Client) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*http.Client) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
