// Code generated by mockery v1.0.0

// This comment works around https://github.com/vektra/mockery/issues/155

package collectors

import cli "github.com/urfave/cli"
import collector "gitlab.com/gitlab-org/ci-cd/gcp-exporter/collectors/collector"
import mock "github.com/stretchr/testify/mock"

// MockMapInterface is an autogenerated mock type for the MapInterface type
type MockMapInterface struct {
	mock.Mock
}

// Add provides a mock function with given fields: _a0
func (_m *MockMapInterface) Add(_a0 collector.Interface) {
	_m.Called(_a0)
}

// EnableFlagNames provides a mock function with given fields:
func (_m *MockMapInterface) EnableFlagNames() map[string]string {
	ret := _m.Called()

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// Flags provides a mock function with given fields:
func (_m *MockMapInterface) Flags() []cli.Flag {
	ret := _m.Called()

	var r0 []cli.Flag
	if rf, ok := ret.Get(0).(func() []cli.Flag); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]cli.Flag)
		}
	}

	return r0
}

// Get provides a mock function with given fields: _a0
func (_m *MockMapInterface) Get(_a0 string) collector.Interface {
	ret := _m.Called(_a0)

	var r0 collector.Interface
	if rf, ok := ret.Get(0).(func(string) collector.Interface); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(collector.Interface)
		}
	}

	return r0
}
